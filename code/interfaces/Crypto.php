<?php

interface CheckfrontCryptoInterface {
    /**
     * Return the private server key set in config.server_key of implementation
     * @return mixed
     */
    public static function server_key();

    /**
     * Return a value which is safe to use in url's and copy-paste operations and is
     * ANSI. May not actually have anything to do with PHP url_encode etc such as using binToHex
     *
     * @param $rawValue
     *
     * @return mixed
     */
    public static function friendly($rawValue);

    /**
     * Return the raw value for a cooked value which may be unsafe to use in urls, human-unfriendly etc
     * May not have anything to do with url_decode but us something like hexToBin
     *
     * @param $cookedValue
     *
     * @return mixed
     */
    public static function unfriendly($cookedValue);

    /**
     * Encrypt value optionally using key
     *
     * @param $plainTextValue
     * @param $key
     *
     * @return mixed
     */
    public static function encrypt($plainTextValue, $key = null);

    /**
     * Decrypt value optionally using key
     *
     * @param $encryptedValue
     * @param $key
     *
     * @return mixed
     */
    public static function decrypt($encryptedValue, $key = null);

    /**
     * Return an encoded version of passed parameters which can be passed on link into the system booking pages.
     * Dates will be converted to 'checkfront' dates so YYYYMMDD. The return token is hex2bin encoded ready to pass
     * on e.g. request.
     *
     * @param $accessKey - this should be generated by CheckfrontModule.make_access_key
     * @param $itemID
     * @param $startDate
     * @param $endDate
     *
     * @return null|string - bin2hex encoded encrypted token
     */
    public static function encrypt_token($accessKey, $itemID, $startDate, $endDate);

    /**
     * Return array of packageID, $startDate, $endDate from a provided encoded link segment. Start data and end date
     * will be 'checkfront' dates so YYYYMMDD. Returned array number and sequence matches the
     * parameters passed to self.encode_token call.
     *
     * @param $accessKey  - used when the link was encrypted, not encoded when passed.
     * @param $token      - link to decrypt into parts, will be hex2bin converted before passing to Crypto
     * @param null $index - optionally only return a single value from decoded array
     *
     * @return null|array|string - [packageID, startDate, endDate]
     */
    public static function decrypt_token($accessKey, $token, $index = null);

    /**
     * Generate a new access key. It may be ugly so needs to be e.g.
     * cooked() before being presented to the client for copy/paste etc and
     * so will also need to be decoded at the other end.
     *
     * @param null $salt
     *
     * @return string
     */
    public static function generate_key($salt = null);

}