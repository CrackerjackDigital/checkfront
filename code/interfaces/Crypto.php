<?php

interface CheckfrontCryptoInterface {
    /**
     * Return the private server key used as part of the two-step encryption process. This should be
     * returned 'friendly'.
     * @return string - friendly
     */
    public function server_key();


    /**
     * Generate a new access key. It should be 'friendly' so needs to be passed through
     * self.unfriendly before being handed to the native crypto api.
     *
     * @param null $init - anything needed to init or augment the generated key, e.g. a randomiser
     *
     * @return string - friendly
     */
    public function generate_key($init = null);

    /**
     * Return a value which is safe to use in url's and copy-paste operations, at a pinch typeable so
     * probably ANSI. This could be a cypher text or a system generated key which is a byte string for example.
     *
     * @param $unfriendlyValue - value likely to break urls or be otherwise unfriendly to humans/UI.
     *
     * @return string - friendly value
     */
    public function friendly($unfriendlyValue);

    /**
     * NB: this is opposite to friendly and declared as abstract function as is protected. Only 'friendly' values
     * should be passsed into the crypto interface so the unfriendly function isn't and doesn't need to be publicly
     * accessible.
     * Return the native value from a 'friendly' value returned by the 'friendly' function.
     *
     * @param string $friendlyValue - value generated by the 'friendly' function.
     *
     * @return mixed - unfriendly value usefull directly to crypto libraries etc
     */
    /*
     * abstract protected function unfriendly($friendlyValue);
     */

    /**
     * Encrypt value using the server key, and optionally as a second pass using $friendlyKeySecondPass if provided.
     * The optional friendly key should be 'unfriendlied' before use.
     *
     * @param string $plainTextValue
     * @param string|null $friendlyKeySecondPass - should have been generated using self.generate_key
     *
     * @return string - friendly encrypted $plainTextValue
     */
    public function encrypt($plainTextValue, $friendlyKeySecondPass = null);

    /**
     * Decrypt value using server key, optionally using provided $friendleyKey which should be same as when the
     * values was encrypted. The optional friendly key should be 'unfriendlied' before use.
     *
     * @param string $friendlyEncryptedValue     - friendly encrypted value
     * @param string|null $friendlyKeySecondPass - should have been generated using self.generate_key
     *
     * @return string - decrypted value, maybe unfriendly
     */
    public function decrypt($friendlyEncryptedValue, $friendlyKeySecondPass = null);


    /**
     * Return an encoded version of passed parameters which can be passed on link into the system booking pages.
     * The return token is friendly ready to pass on url or give to person. The optional friendly key should be
     * 'unfriendlied' before use.
     *
     * @param $itemID
     * @param $startDate
     * @param $endDate
     * @param $accessKey - optional second-pass key, see decrypt method for details
     *
     * @return null|string - friendly encrypted value
     */
    public function encrypt_token($itemID, $startDate, $endDate, $accessKey = null);

    /**
     * Return array of packageID, $startDate, $endDate from a provided encoded link segment. The optional friendly key should be
     * 'unfriendlied' before use.
     *
     * @param $friendlyToken - link to decrypt into parts, will be hex2bin converted before passing to Crypto
     * @param $accessKey     - optional second-pass key, see decrypt method for details
     *
     * @return null|array|string - [packageID, startDate, endDate]
     */
    public function decrypt_token($friendlyToken, $accessKey = null);


    /**
     * Native single pass encryption of value using key.
     *
     * @param $value
     * @param $friendlyKey - key generated by generate_key method
     *
     * @return string
     */
    public function encrypt_native($value, $friendlyKey);

    /**
     * Native single pass decryption of value using key.
     *
     * @param $encryptedValue
     * @param $friendlyKey - key generated by generate_key method
     *
     * @return string - encrypted value, maybe unfriendly
     */
    public function decrypt_native($encryptedValue, $friendlyKey);

}